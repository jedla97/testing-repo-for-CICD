name: Build all subject PDFs

# Feel free to increment this counter in your attempts to do things
# the smart way instead of the easy way.
#
# total_hours_wasted = 7

on:
  push:
    branches:
      - master
    paths:
      - "**/*.tex"
  workflow_dispatch:
    branches:
      - main
    paths:
      - "**/*.tex"

jobs:

  directories: # Job that list subdirectories
    runs-on: ubuntu-latest
    outputs:
      dir: ${{ steps.set-dirs.outputs.dir }} # generate output name dir by using inner step output
    steps:
      - uses: actions/checkout@v2
      - id: set-dirs # Give it an id to handle to get step outputs in the outputs key above
        run: echo "::set-output name=dir::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"
        # Define step output named dir base on ls command transformed to JSON thanks to jq
  loop:
    runs-on: ubuntu-latest
    needs: [directories] # Depends on previous job
    strategy:
      matrix:
        dir: ${{fromJson(needs.directories.outputs.dir)}} # List matrix strategy from directories dynamically
    steps:
      # Clone the repository
      - name: Set up Git repository
        uses: actions/checkout@v2

      # Make the builds
      # If there is a better way to do this, instead of doing it one-by-one, let me know
      - name: Build ${{matrix.dir}}
        uses: xu-cheng/latex-action@v2
        with:
          latexmk_shell_escape: true
          working_directory: ${{matrix.dir}}
          root_file: main.tex

  build:
    runs-on: ubuntu-latest
    needs: needs: [loop]

    steps: 
      # Prepare tag name
      - name: Create tag
        id: create_tag
        run: |
          tag=build-$(date +%Y%m%d-%H%M%S)
          echo "::set-output name=tag::$tag"
      # Create release draft, so we can add the files
      - name: Create draft release
        id: create_draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false

      # Upload the assets
      # Again, if there is better way, please, let me know.
      - name: Add MPC-KRY to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_draft_release.outputs.upload_url }}
          asset_path: ./MPC-KRY/main.pdf
          asset_name: MPC-KRY.pdf
          asset_content_type: application/pdf

      # Upload the assets
      # Again, if there is better way, please, let me know.
      - name: Add MPC-PDA to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_draft_release.outputs.upload_url }}
          asset_path: ./MPC-PDA/main.pdf
          asset_name: MPC-PDA.pdf
          asset_content_type: application/pdf

      # Publish the release
      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_draft_release.outputs.id }}